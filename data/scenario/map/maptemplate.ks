;マップを簡略化
/*
共通しているところはなるべく共通させて、
相違点の記入だけにするように。

*/

/*
使いにくいところ
・マップ名
・座標計算(デフォ自動計算ほしい)

Aから呼び出したBはCという要素を持っている
Dから呼び出したBはEという要素を持っている
B[[A[C]],[D[E]]]

この時のBはマップ名、A,Dは呼び出したマップ名
C,Eは初期位置、移動イベント登録(push)、イベントtarget内容
マップ移動時にイベントを挟まないならtf.mpnmをBに変更するだけで良い。
*/
;===ここから===================================================
;==============================================================
;==============================================================

/*
ファイル名を正規表現で自動取得する仕組みを入れようとしていた。
あと2時間ぐらいでできそう

*/

[iscript ]
f.n='01'
var hoge = ['f101_01_01_cy'   ,'f101_01_01_frz'  ,'f101_01_24_ctr'  ,'f101_01_28_ant'  ,'f101_01_32_frz'  ,'f101_06_34_suc'  ,'f101_06_43_ptk'  ,'f101_07_07_cref' ,'f101_12_25_wap' ,'f101_13_11_frz' ,'f101_20_01_set' ,'f101_30_01_cdb' ,'f101_30_10_ccr' ,'f101_34_01_pic' ,'f101_34_23_frzp','f101_36_28_ref','f101_36_34_ref','f101_36_40_ref','f101_42_28_mcn','f101_44_37_hac','f101_47_25_wbs','f101_50_01_ref','f101_57_37_ref','f101_62_01_ent','f101_62_25_hwp','f101_62_37_ref','f201_01_01_mac','f201_01_15_rep','f201_06_15_wgh','f201_29_01_trm','f201_35_23_rep','f201_39_01_dmp','f201_39_13_ant','f201_46_01_ent','f201_48_06_rep','f201_48_18_vgt','f201_49_01_pmp',];

// 正規表現で、'あいうけこ' の文字列をマッチングする
//文字列から変換させる場合\は\\にしておく。
var regex = new RegExp('^(f1)(01)_('+f.n+')_(\\d+)_(.*)$');
alert(regex);

if (regex.test(hoge[0]))

// 条件式で、正規表現と配列の要素を比較する
/*
if (regex.test(hoge[0])) {
  console.log('True');
  alert('true');
} else {
  console.log('False');
}
*/
[endscript ]
[s]

/*
マップの簡易説明
マップ日本語名ぐらいは書いた方がいいかも。
*/

;ADV表示の準備------------------------------
[adv]
;イベントラベル番号f.labelを作成する---------
[crilbl]
;---------------------------------------------------
;ラベルへ飛ぶ
[jump target="&f.label" cond="!tf.warp"]

;このラベルが存在しないとき、confirmに飛ぶようにする。
[jump target="*confirm" ]

[s]
;----ここまで全てのマップ共通------




;===呼び出して値を登録するゾーン(一度通ればOK)======================
    *place
        /*
        1.どのマップから飛んできたの判定->呼び出すマップ初期位置を設定
        2.初期位置を変数に渡す(split関数)
        3.飛んできたマップ名をファイル名と同じ名前に再登録する
        ---
        イベント登録
        push関数で5個の引数で作成。
        ---
            //f.iseve=true//イベントが発生するか否かfalseにすることないよ(マップ移動のため)
        f.isfps=false//FPSモードの設定
        */
        [iscript ]
        //f.maplst(移動前のマップ名)に対応する初期位置をf.etlに入れる


        //f.etlを分解収納するsplitをかける
        split(f.etl);//f.povxyzにそれぞれ入る
        f.maplst=f.mpnm;//呼び出した(この)マップ名に中身を更新。


        //pushで範囲位置タイプを登録する
        [endscript ]
        [jump storage="&f.pg" target="*rt_bld" ]
    [s ]

    ;マップごとに登場するモノや人を宣言しておく
    *dec
        ;[chara_new name="guard" storage="chara/fig/guard.png" jname="門番さん" height="720"   ]
        [return]
    [s]
;==================================================================

;イベント内容(何度も呼び出す)===============

    ;pushで記入した引数を文字列結合したラベルと内容(移動イベント<2>)
    *0000
    @eval exp="tf.mpnm='f201_01_01_mac'"//移動先のマップ名
    ;イベントを挟む場合はconfirm,挟まない場合はgo
    [jump target="*confirm" ]

    ;adv的イベント(<3>)
    *1111
    [return]
    [s]

    ;移動のときにイベントを挟む場合
    *confirm
    [iscript ]
    /*
    f.labelの5桁の数値から移動先のマップ名を割り出す
    3文字目がX、4文字目がY
    現在のファイル名(f.maplst)を分解して、3要素、4要素を比較して
    上の.testを利用して呼び出す
    
    */
        tf.mpnm=''
    [endscript ]
    [dialog text="マップ移動するけどいいかな？" type="confirm" target="*go"  ]
    [knockback]
    [return]

    ;マップ移動専用。このマップで追加したものを削除する。
    *go
        [chara_hide_all]
        ;[chara_delete name="guard" ]
        [iscript ]
            //マップの既存読込をOFF
            f.isnmp=false;
            //次に呼び出すマップ名
            f.mpnm=tf.mpnm;
        [endscript ]
        ;マップ新読込
        [map_smn]
        ;マップ既存読込をON(1度だけの処理を行わない)
        @eval exp="f.isnmp=true" 
        [return]
    [s]

;=============================


